= How to Find the Row that contains the Maximum Value for a Column

We have already covered how to find the maximum value for a column, but what if we want to see more information about that row other than the maximum value for the column.

'''

==  Procedural Solution

For a version that assumes only 1 maximum value

.Pseudo.code
----
maxvalue = 0
rowid = 0
loop through rows
    if column value > maxvalue
        maxvalue = column value
        rowid = current row id

print row equal to rowid
----

If you wanted to capture multiple rows with the same max value

.Pseudo.code
----
MaxValue = -10 (or some value you know is below your minimum)
RowPosition = 0
HashOfMaxRows = []
loop through rows
    if column value > MaxValue
        ArrayOfMaxRows = []
        maxvalue = column value
        ArrayOfMaxRows.append(RowPosition)
    else if column value = maxvalue
        ArrayOfMaxRows.append(RowPosition)

loop through data
    if row # is in HashOfMaxRows
        print row

----

'''

==  SQL Solution

There are two solutions

Find the MaxValue and then use that in a subquery

.Subquery.sql
[source, sql]
----
select datets, elkcwmet_wspd, elkcwmet_f_wspd from elkhorn where elkcwmet_wspd = (select max(elkcwmet_wspd) from elkhorn);

----

Or we can do a join to achieve the same effect

.Join.sql
[source, sql]
----
 SELECT datets, elkcwmet_wspd, elkcwmet_f_wspd
FROM elkhorn
         JOIN (
    SELECT max(elkcwmet_wspd)
    FROM elkhorn
) e ON e.max = elkhorn.elkcwmet_wspd;

----


Performance difference between the two can vary depending on your data and indices. For example, on table with about ~650K rows without indices the subquery ran in about ~650ms while the join took about ~1300ms. After adding a B-tree index the subquery took ~0.110ms and the join took ~0.092ms
